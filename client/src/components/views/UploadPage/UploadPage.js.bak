import React, {useState} from 'react';
import './UploadPage.css'
import CKEditor from '@ckeditor/ckeditor5-react';
import ClassicEditor from '@ckeditor/ckeditor5-build-classic';
import ReactQuill from 'react-quill';
import 'react-quill/dist/quill.snow.css';

import {
    Typography,
    Button,
    Form,
    message,
    Input,
    Icon,
    Checkbox,
    Menu
} from 'antd';
import Dropzone from 'react-dropzone'
import Axios from 'axios';
import {useSelector} from 'react-redux';
import LandingPage from '../LandingPage/LandingPage';
import {Route} from 'react-router-dom';
import { lang } from 'moment';


const {TextArea} = Input;
const {Title} = Typography;

const PrivateOptions = [
    {
        value: 0,
        label: "비공개"
    }, {
        value: 1,
        label: "공개"
    }
]

const CategoryOptions = [
    {
        value: 0,
        label: "웹 어플리케이션"
    }, {
        value: 1,
        label: "안드로이드 어플리케이션"
    }, {
        value: 2,
        label: "IOS 어플리케이션"
    }, {
        value: 3,
        label: "MFC 프로젝트"
    }, {
        value: 4,
        label: "게임 개발"
    }, {
        value: 5,
        label: "기타"
    }
]

const LanguageOptions = [
    {
        value: 0,
        label: "C/C++"
    }, {
        value: 1,
        label: "JAVA"
    }, {
        value: 2,
        label: "C#"
    }, {
        value: 3,
        label: "Python"
    }, {
        value: 4,
        label: "Java Script"
    }, {
        value: 5,
        label: "없음"
    }
]

function UploadPage() {
    const user = useSelector(state => state.user);
    const [DocTitle, setDocTitle] = useState("")
    const [Description, setDescription] = useState("")
    const [Private, setPrivate] = useState(0)
    const [Category, setCategory] = useState("웹 어플리케이션")
    const [FilePath, setFilePath] = useState("")

    const onTitleChange = (e) => {
        setDocTitle(e.currentTarget.value)
    }

    const onDescriptionChange = (e) => {
        setDescription(e)
        console.log(Description)
    }

    const onPrivateChange = (e) => {
        setPrivate(e.currentTarget.value)
    }

    const onCategoryChange = (e) => {
        setCategory(e.currentTarget.value)
    }

    const onDrop = (files) => {
        let formData = new FormData;
        const config = {
            header: {
                'content-type': 'multipart/form-data'
            }
        }
        formData.append("file", files[0])

        console.log(files);

        Axios
            .post('http://localhost:5000/api/image/uploadfiles', formData, config)
            .then(response => {
                if (response.data.success) {
                    console.log(response.data)

                    setFilePath(response.data.url)

                } else {
                    alert('이미지 업로드 실패')
                }
            })
    }

    const onSubmit = (e) => {
        e.preventDefault();

        const variables = {
            writer: user.userData._id,
            title: DocTitle,
            description: Description,
            privacy: Private,
            filepath: FilePath,
            category: Category
        }

        if (DocTitle !== "") {
            if (Description !== "") {
                if (FilePath !== "") {
                    Axios
                        .post('http://localhost:5000/api/image/uploadImage', variables)
                        .then(response => {
                            if (response.data.success) {
                                alert('게시물이 등록되었습니다.');
                                return window
                                    .location
                                    .replace('/')
                            } else {
                                alert('문서 업로드 실패')
                            }
                        })
                } else {
                    alert('사진은 하나 이상 등록해야 합니다.')
                }
            } else {
                alert('본문을 입력하세요')
            }
        } else {
            alert('제목을 입력하세요.')
        }

    }

    return (
        <div style={{
                margin: '1rem auto'
            }}>
            <dev
                style={{
                    textAlign: 'left',
                    marginBottom: '1rem'
                }}>

                <Form onSubmit={onSubmit}>
                    <text id='category_them'>카테고리</text>
                    <select onChange={onCategoryChange} id='category_select'>
                        {
                            CategoryOptions.map(
                                (item, index) => (<option key={index} value={item.value}>{item.label}</option>)
                            )
                        }
                    </select>

                    <div className='Write'>
                        <div id='Title'>
                            <Input
                                onChange={onTitleChange}
                                value={DocTitle}
                                placeholder='제목'
                                id='title_txt'/>
                        </div>

                        <ReactQuill id='.ql-editor'
                           //defaultValue={text}
                           onChange={(text, delta, source, editor) => {
                             if (source == 'user') {
                               // place whatever function you want to execute when user types here:
                               onDescriptionChange(editor.getHTML());
                             }
                           }}
                           theme="snow"
                           modules={{
                            toolbar: [
                                [{ 'font': [] }],
                                [{ 'size': ['small', 'normal', 'large', 'huge'] }],
                                ['bold', 'italic', 'underline', 'strike'],
                                [{ 'align': [] }], 
                                [{ 'list': 'ordered'}, { 'list': 'bullet' }, 'blockquote', { 'direction': 'rtl' }],                               
                                [{'color' : []}, { 'background': [] },  { 'script': 'sub'}, { 'script': 'super' }],
                                ['image', 'code-block', 'video', 'link'],
                            ],
                             syntax: true,
                           }}
                        />

                        <CKEditor
                            editor={ClassicEditor}
                            data="<p> </p>"
                            onInit={editor => {
                                // You can store the "editor" and use when it is needed.
                                console.log('Editor is ready to use!', editor);
                            }}
                            onChange={(event, editor) => {
                                onDescriptionChange(editor.getData());
                            }}
                            onBlur={(event, editor) => {
                                console.log('Blur.', editor);
                            }}
                            onFocus={(event, editor) => {
                                console.log('Focus.', editor);
                            }}
                            config={{
                                ckfinder: {
                                    uploadUrl: 'http://localhost:5000/api/image/uploads'
                                }
                            }}/> {/*
                        <div>
                            <TextArea
                                onChange={onDescriptionChange}
                                value={Description}
                                placeholder='내용을 입력하세요'
                                id='content_txt'/>
                        </div>
                        */
                        }
                    </div>

                    <br/>

                    <label>이미지 업로드</label>
                    <div
                        style={{
                            display: 'flex',
                            //justifyContent: 'space-between'
                        }}>

                        {/* Thumb nail */}
                        {
                            FilePath && <div>
                                    <img src={`http://localhost:5000/${FilePath}`} alt="thumbnail" id='image_size'/>
                                </div>
                        }

                        {/*Drop zone*/}

                        <Dropzone onDrop={onDrop} multiple={true} maxSize={1000000}>
                            {
                                ({getRootProps, getInputProps}) => (
                                    <div
                                        style={{
                                            width: '100px',
                                            height: '100px',
                                            fontSize: '36pt',
                                            //fontWeight: 'bold',
                                            border: '1px solid lightgrey',
                                            display: 'flex',
                                            alignItems: 'center',
                                            justifyContent: 'center'
                                        }}
                                        {...getRootProps()}>
                                        <input {...getInputProps()}/>
                                        <text >
                                            +
                                        </text>
                                    </div>
                                )
                            }

                        </Dropzone>

                    </div>

                    <br/>
                    <br/>

                    <select onChange={onPrivateChange}>
                        {
                            PrivateOptions.map(
                                (item, index) => (<option key={index} value={item.value}>{item.label}</option>)
                            )
                        }
                    </select>

                    <br/>
                    <br/>

                    <br/>
                    <br/>
                    <Button type="primary" size="large" onClick={onSubmit}>
                        등록
                    </Button>

                </Form>
            </dev>
        </div>
    )
}

export default UploadPage